# Task ID: 7
# Title: Implement Task List UI
# Status: done
# Dependencies: 6
# Priority: high
# Description: Implement the UI for displaying the task list, including slidable actions for editing and deleting tasks. Use Material Design 3 for a modern look and feel.
# Details:
1.  Create a `task_list_screen.dart` file in `lib/features/task_management/presentation/pages/`.
2.  Use `ListView.builder` to display the list of tasks.
3.  Implement slidable actions using a package like `flutter_slidable`.
4.  Use `BlocBuilder` to connect the UI with the `TaskBloc`.
5.  Implement Material Design 3 components for a modern UI.

# Test Strategy:
Write widget tests to verify that the task list is displayed correctly, slidable actions work as expected, and the UI updates based on the BLoC state.

# Subtasks:
## 1. Create task_list_screen.dart [done]
### Dependencies: None
### Description: Create the task_list_screen.dart file in lib/features/task_management/presentation/pages/.
### Details:
Create a new Dart file named `task_list_screen.dart` in the specified directory. This file will contain the UI implementation for displaying the task list.

## 2. Implement ListView.builder for task display [done]
### Dependencies: None
### Description: Use ListView.builder to efficiently display the list of tasks.
### Details:
Implement `ListView.builder` within `task_list_screen.dart` to dynamically render the list of tasks. Ensure that each task item is displayed correctly with relevant information (e.g., title, description, due date).

## 3. Implement slidable actions [done]
### Dependencies: None
### Description: Implement slidable actions for editing and deleting tasks using a package like flutter_slidable.
### Details:
Integrate the `flutter_slidable` package to add slidable actions to each task item. Implement actions for editing and deleting tasks. Ensure that these actions trigger the appropriate events in the `TaskBloc`.

## 4. Connect UI with TaskBloc using BlocBuilder [done]
### Dependencies: None
### Description: Use BlocBuilder to connect the UI with the TaskBloc and update the UI based on the BLoC state.
### Details:
Wrap the `ListView.builder` with a `BlocBuilder` to listen to the `TaskBloc`'s state changes. Update the UI based on the emitted states (e.g., `TaskLoading`, `TaskLoaded`, `TaskError`). Display appropriate loading indicators or error messages when necessary.

## 5. Implement Material Design 3 components [done]
### Dependencies: None
### Description: Implement Material Design 3 components for a modern UI.
### Details:
Use Material Design 3 components (e.g., `Card`, `ListTile`, `IconButton`) to style the task list UI. Ensure that the UI adheres to Material Design 3 guidelines for visual appearance and user experience.
