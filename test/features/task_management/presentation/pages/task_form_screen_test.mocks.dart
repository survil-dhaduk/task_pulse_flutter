// Mocks generated by Mockito 5.4.5 from annotations
// in task_pulse/test/features/task_management/presentation/pages/task_form_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_pulse/core/services/notification_service.dart' as _i3;
import 'package:task_pulse/features/task_management/domain/usecases/usecases.dart'
    as _i2;
import 'package:task_pulse/features/task_management/presentation/bloc/task_bloc.dart'
    as _i5;
import 'package:task_pulse/features/task_management/presentation/bloc/task_event.dart'
    as _i7;
import 'package:task_pulse/features/task_management/presentation/bloc/task_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTasks_0 extends _i1.SmartFake implements _i2.GetTasks {
  _FakeGetTasks_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateTask_1 extends _i1.SmartFake implements _i2.CreateTask {
  _FakeCreateTask_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateTask_2 extends _i1.SmartFake implements _i2.UpdateTask {
  _FakeUpdateTask_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTask_3 extends _i1.SmartFake implements _i2.DeleteTask {
  _FakeDeleteTask_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeToggleTaskCompletion_4 extends _i1.SmartFake
    implements _i2.ToggleTaskCompletion {
  _FakeToggleTaskCompletion_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchTasks_5 extends _i1.SmartFake implements _i2.SearchTasks {
  _FakeSearchTasks_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTasksByPriority_6 extends _i1.SmartFake
    implements _i2.GetTasksByPriority {
  _FakeGetTasksByPriority_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationService_7 extends _i1.SmartFake
    implements _i3.NotificationService {
  _FakeNotificationService_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskState_8 extends _i1.SmartFake implements _i4.TaskState {
  _FakeTaskState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBloc extends _i1.Mock implements _i5.TaskBloc {
  MockTaskBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTasks get getTasks => (super.noSuchMethod(
        Invocation.getter(#getTasks),
        returnValue: _FakeGetTasks_0(
          this,
          Invocation.getter(#getTasks),
        ),
      ) as _i2.GetTasks);

  @override
  _i2.CreateTask get createTask => (super.noSuchMethod(
        Invocation.getter(#createTask),
        returnValue: _FakeCreateTask_1(
          this,
          Invocation.getter(#createTask),
        ),
      ) as _i2.CreateTask);

  @override
  _i2.UpdateTask get updateTask => (super.noSuchMethod(
        Invocation.getter(#updateTask),
        returnValue: _FakeUpdateTask_2(
          this,
          Invocation.getter(#updateTask),
        ),
      ) as _i2.UpdateTask);

  @override
  _i2.DeleteTask get deleteTask => (super.noSuchMethod(
        Invocation.getter(#deleteTask),
        returnValue: _FakeDeleteTask_3(
          this,
          Invocation.getter(#deleteTask),
        ),
      ) as _i2.DeleteTask);

  @override
  _i2.ToggleTaskCompletion get toggleTaskCompletion => (super.noSuchMethod(
        Invocation.getter(#toggleTaskCompletion),
        returnValue: _FakeToggleTaskCompletion_4(
          this,
          Invocation.getter(#toggleTaskCompletion),
        ),
      ) as _i2.ToggleTaskCompletion);

  @override
  _i2.SearchTasks get searchTasks => (super.noSuchMethod(
        Invocation.getter(#searchTasks),
        returnValue: _FakeSearchTasks_5(
          this,
          Invocation.getter(#searchTasks),
        ),
      ) as _i2.SearchTasks);

  @override
  _i2.GetTasksByPriority get getTasksByPriority => (super.noSuchMethod(
        Invocation.getter(#getTasksByPriority),
        returnValue: _FakeGetTasksByPriority_6(
          this,
          Invocation.getter(#getTasksByPriority),
        ),
      ) as _i2.GetTasksByPriority);

  @override
  _i3.NotificationService get notificationService => (super.noSuchMethod(
        Invocation.getter(#notificationService),
        returnValue: _FakeNotificationService_7(
          this,
          Invocation.getter(#notificationService),
        ),
      ) as _i3.NotificationService);

  @override
  _i4.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTaskState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.TaskState);

  @override
  _i6.Stream<_i4.TaskState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.TaskState>.empty(),
      ) as _i6.Stream<_i4.TaskState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i7.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i7.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.TaskState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i7.TaskEvent>(
    _i8.EventHandler<E, _i4.TaskState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i8.Transition<_i7.TaskEvent, _i4.TaskState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i8.Change<_i4.TaskState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
